#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4
import os
import argparse
import codecs

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import cm

# Fix font used for display to prevent display problems with non-ASCII
# characters.
matplotlib.rc('font', family='DejaVu Sans')


plot_modes = ['raw', 'diff']


def generate_diff(filenames):
    """
    Compute the evolution of some CSV values at each iteration
    """
    # Load structured array
    dataList = list()
    for f in filenames:
        # Load CSV
        d = np.genfromtxt(f, delimiter=',', dtype=np.float64, skip_header=1)
        # Load UTF-8 names (NumPy cannot handle that properly...)
        names = [s.strip() for s in codecs.open(f, 'r', 'utf-8').readline()[:-1].split(',')]
        # Add the file name to the label (since multiple files could share
        # the same names)
        if (len(filenames) > 1):
            names = tuple(os.path.basename(f) + ": " + n for n in names)
        dataList.append((d, names))

    diffList = list()
    for data in dataList:
        d = np.zeros(data[0].shape, dtype=data[0].dtype)
        names = data[1]
        diffList.append((d, names))
        for i in range(1,data[0].shape[0]):
            diffList[-1][0][i,:] = data[0][i,:] - data[0][i-1,:]

    return diffList

def plot_csv_data(dataList, y_label):
    """
    Plot a list of CSV data
    """
    cmap = cm.gnuplot2

    fig, ax = plt.subplots()

    lines = []
    N = sum(len(data[1]) for data in dataList)
    i = 0

    for data in dataList:
      names = data[1]
      for idx,col_name in enumerate(names):
          # Use a different color for each line
          c = cmap(float(i+1)/(N+1))
          line, = ax.plot(data[0][:,idx], label=col_name, color=c)
          lines.append(line)
          i+=1

    # If mpldatacursor is available
    try:
        from mpldatacursor import HighlightingDataCursor
        HighlightingDataCursor(lines, highlight_color='red')
    except ImportError:
        pass # module does not exist

    # Legend
    plt.tight_layout()
    plt.xlabel("iteration number")
    plt.ylabel(y_label)
    plt.legend(loc='upper right')
    plt.show(block=True)

def plot_csv_file(filenames, y_label):
    """
    Plot CSV files.
    """

    # Generate data array
    dataList = list()
    for f in filenames:
        # Load CSV
        d = np.genfromtxt(f, delimiter=',', dtype=np.float64, skip_header=1)
        # Load UTF-8 names (NumPy cannot handle that properly...)
        names = [s.strip() for s in codecs.open(f, 'r', 'utf-8').readline()[:-1].split(',')]
        # Add the file name to the label (since multiple files could share
        # the same names)
        if (len(filenames) > 1):
            names = tuple(os.path.basename(f) + ": " + n for n in names)
        dataList.append((d,names))

    # Plot generated data
    plot_csv_data(dataList, y_label)

def main(**kwargs):
    log_dir = kwargs['dir']
    log_files = kwargs['files']
    plot_raw = kwargs['mode'] == 'raw'
    plot_diff = kwargs['mode'] == 'diff'

    # Check the existence of the log directory
    if not(os.path.isdir(log_dir) and os.path.isfile(log_dir + '/journal.log')):
        raise Exception("Invalid RobOptim log directory")

    filenames = list()
    for f in log_files:
        filenames.append(log_dir + '/' + f)

    if plot_raw:
        plot_csv_file(filenames, y_label="raw data")

    if plot_diff:
        plot_csv_data(generate_diff(filenames),
                      y_label="difference between successive iterations")

if __name__ == '__main__':
    # Parse arguments
    parser = argparse.ArgumentParser(description='Plot CSV data from RobOptim logs')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.1')
    parser.add_argument('dir', type=str, help='log directory')
    parser.add_argument('-f', '--files', nargs='*', type=str, metavar='',
                        help='input CSV files (relative paths in log directory)',
                        default=['x-evolution.csv'])
    parser.add_argument('--mode', choices=plot_modes, default="raw",
                        help='plot mode (\'raw\' for raw values, or \'diff\''
                        ' for difference at each iteration)')
    args = parser.parse_args()
    main(**vars(args))
